{
    "project": {
        "name": "ItemMirror",
        "description": "ItemMirror: a library for working with XooML to promote open cross platform tool usage",
        "version": "0.8.2",
        "url": "https://github.com/KeepingFoundThingsFound/itemMirrorWebClient"
    },
    "files": {
        "scripts/AssociationEditor.js": {
            "name": "scripts/AssociationEditor.js",
            "modules": {},
            "classes": {
                "AssociationEditor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/FragmentEditor.js": {
            "name": "scripts/FragmentEditor.js",
            "modules": {},
            "classes": {
                "FragmentEditor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/ItemDriver.js": {
            "name": "scripts/ItemDriver.js",
            "modules": {},
            "classes": {
                "ItemDriver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/ItemMirror.js": {
            "name": "scripts/ItemMirror.js",
            "modules": {},
            "classes": {
                "ItemMirror": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/PathDriver.js": {
            "name": "scripts/PathDriver.js",
            "modules": {},
            "classes": {
                "PathDriver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/SyncDriver.js": {
            "name": "scripts/SyncDriver.js",
            "modules": {},
            "classes": {
                "SyncDriver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/XooMLConfig.js": {
            "name": "scripts/XooMLConfig.js",
            "modules": {},
            "classes": {
                "XooMLConfig": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/XooMLDriver.js": {
            "name": "scripts/XooMLDriver.js",
            "modules": {},
            "classes": {
                "XooMLDriver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/XooMLExceptions.js": {
            "name": "scripts/XooMLExceptions.js",
            "modules": {},
            "classes": {
                "XooMLExceptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts/XooMLUtil.js": {
            "name": "scripts/XooMLUtil.js",
            "modules": {},
            "classes": {
                "XooMLUtil": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AssociationEditor": {
            "name": "AssociationEditor",
            "shortname": "AssociationEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/AssociationEditor.js",
            "line": 1,
            "description": "AssociationEditor is a minimal interface to represent a XooML2\nassociation. This object is used together with FragmentEditor to\nfully reprsent a XooML fragment as javascript object. It can be\nconverted seamlessly between an object and XML.\n\nNote that upon construction, this doesn't actually create an\nassociation, merely a /representation/ of an association.\n\nThere are two ways to construct an AssociationEditor:\n1. Through a valid Association XML Element\n2. By specifying all data through an object\n\nFor ItemMirror core developers only. Enable protected to see.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options specified for the constructor",
                    "type": "Object",
                    "props": [
                        {
                            "name": "element",
                            "description": "A DOM element that correctly\n represents an association as specified by the XooML schema.",
                            "type": "Element"
                        },
                        {
                            "name": "commonData",
                            "description": "An object that specifies the\n data for an association. Look at the private constructor\n `_fromOptions` for more details",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": ""
        },
        "FragmentEditor": {
            "name": "FragmentEditor",
            "shortname": "FragmentEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/FragmentEditor.js",
            "line": 1,
            "description": "Constructs a FragmentWrapper for a XooML fragment. In the following cases.\n\n1. XooMLFragment String is passed in and is used as the XooMLFragment\n2. XooMLFragment Element is passed in and is used as the XooMLFragment.\n2. Associations, XooMLDriver, ItemDriver, SyncDriver,\ngroupingItemURI are given and used to create a new XooMLFragment with\nthe given data.\n\nThe FragmentWrapper is merely a representation of a XooML fragment,\nand is used by an itemMirror that actually handles the details of\ncreating deleting and modifying associations.\n\nFor ItemMirror core developers only. Enable protected to see.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new FragmentWrapper with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "text",
                            "description": "Unparsed XML directly from a storage\n platform.",
                            "type": "String"
                        },
                        {
                            "name": "element",
                            "description": "XML Element representing a XooML\n                  fragment. Required for case 1.",
                            "type": "Element"
                        },
                        {
                            "name": "associations",
                            "description": "List of associations for\n         the newly constructed XooMLFragment in case 2. <br/>__optional__",
                            "type": "AssociationEditor[]"
                        },
                        {
                            "name": "commonData",
                            "description": "Common data for the\n fragment. Look at the constructor for more details. Required for case 2",
                            "type": "Object"
                        },
                        {
                            "name": "groupingItemURI",
                            "description": "The URI for the grouping\n item of the fragment. Required for case 2.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": ""
        },
        "ItemDriver": {
            "name": "ItemDriver",
            "shortname": "ItemDriver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/ItemDriver.js",
            "line": 1,
            "description": "An item utility interacts with the item storage and is responsible for\ncreating and deleting items. This is an implementation of item utility\nusing Dropbox as the item storage.\n\nFor ItemMirror core developers only. Enable protected to see.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new ItemU with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "utilityURI",
                            "description": "URI of the utility",
                            "type": "String"
                        },
                        {
                            "name": "dropboxClient",
                            "description": "Authenticated dropbox client",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": ""
        },
        "ItemMirror": {
            "name": "ItemMirror",
            "shortname": "ItemMirror",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/ItemMirror.js",
            "line": 1,
            "description": "ItemMirror represents an Item according to the XooML2 specification.\n\nIt can be instantiated using one of the following two cases based on the\ngiven arguments.\n\n1. XooMLFragment already exists. Given xooMLFragmentURI and xooMLDriver.\n2. The XooMLFragment is created from an existing groupingItemURI (e.g., a dropbox folder).\nGiven a groupingItemURI, itemDriver, and a xooMLDriver a new itemMirror will be constructed for given groupingItemURI.\n\nThrows NullArgumentException when options is null.\n\nThrows MissingParameterException when options is not null and a required\nargument is missing.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new ItemMirror with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "groupingItemURI",
                            "description": "URI to the grouping item. Required\n                 for all cases.",
                            "type": "String"
                        },
                        {
                            "name": "itemDriver",
                            "description": "Data for the ItemDriver to\n                 construct ItemMirror with. Required for cases 2 & 3\n                 Can contain any amount of optional key/value pairs for\n                 the various Driver implementations.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "driverURI",
                                    "description": "URI of the driver.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "xooMLDriver",
                            "description": "Data for the XooMLDriver to\n                 construct ItemMirror with. Required for all cases.\n                 Can contain any amount of optional key/value pairs for\n                 the various Driver implementations.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "driverURI",
                                    "description": "URI of the driver.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "syncDriver",
                            "description": "Data for the SyncDriver to\n                 construct ItemMirror with. Required Case 2 & 3. Can\n                 contain any amount of optional key/value pairs for\n                 the various Driver implementations.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "driverURI",
                                    "description": "URI of the driver.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "readIfExists",
                            "description": "True if ItemMirror\n                  should create an ItemMirror if it does not exist,\n                  else false. Required for Case 2 & 3.",
                            "type": "Boolean"
                        },
                        {
                            "name": "creator",
                            "description": "If being created from another\n itemMirror, specifies that itemMirror which it comes from.",
                            "type": "ItemMirror"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "itemMirror",
                            "description": "Newly constructed ItemMirror",
                            "type": "ItemMirror"
                        }
                    ]
                }
            ]
        },
        "PathDriver": {
            "name": "PathDriver",
            "shortname": "PathDriver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/PathDriver.js",
            "line": 1,
            "description": "A utility library for processing file paths. Handles any type of\nfile path so long as the separator is \"/\"\n\nFor ItemMirror core developers only. Enable protected to see.",
            "access": "protected",
            "tagname": ""
        },
        "SyncDriver": {
            "name": "SyncDriver",
            "shortname": "SyncDriver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/SyncDriver.js",
            "line": 1,
            "description": "An implementation of SyncDriver which syncronizes the XooML so that\nit reflects the storage. This implementation ensures that only the\nXooML is modified, and that the user's storage is never modified,\nsafely protecting any data.\n\nFor ItemMirror core developers only. Enable protected to see.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "itemMirror",
                    "description": "The itemMirror object which you wish to\nsynchronize",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": ""
        },
        "XooMLConfig": {
            "name": "XooMLConfig",
            "shortname": "XooMLConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/XooMLConfig.js",
            "line": 1,
            "description": "Configuration variables for XooML.js\n\nFor ItemMirror core developers only. Enable protected to see.",
            "static": 1,
            "access": "protected",
            "tagname": ""
        },
        "XooMLDriver": {
            "name": "XooMLDriver",
            "shortname": "XooMLDriver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/XooMLDriver.js",
            "line": 1,
            "description": "An XooML utility interacts with an storage and is responsible for\nreading and writing XooML fragments. This is an implementation of XooML utility\nusing Dropbox as the storage.\n\nFor ItemMirror core developers only. Enable protected to see.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new XooMLU with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "fragmentURI",
                            "description": "The URI of fragment\ncontains the XooML",
                            "type": "String"
                        },
                        {
                            "name": "utilityURI",
                            "description": "URI of the utility",
                            "type": "String"
                        },
                        {
                            "name": "dropboxClient",
                            "description": "Authenticated dropbox client",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": ""
        },
        "XooMLExceptions": {
            "name": "XooMLExceptions",
            "shortname": "XooMLExceptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/XooMLExceptions.js",
            "line": 1,
            "description": "Collection of exceptions associated with the XooML tools.\n\nFor ItemMirror core developers only. Enable protected to see.",
            "static": 1,
            "access": "protected",
            "tagname": ""
        },
        "XooMLUtil": {
            "name": "XooMLUtil",
            "shortname": "XooMLUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts/XooMLUtil.js",
            "line": 1,
            "description": "Collection of type checking, exception throwing, utility methods for the\nXooML tools.\n\nFor ItemMirror core developers only. Enable protected to see.",
            "static": 1,
            "access": "protected",
            "tagname": ""
        }
    },
    "classitems": [
        {
            "file": "scripts/AssociationEditor.js",
            "line": 58,
            "description": "Converts the object into an association element, which can then\nbe converted to a string or added to the DOM.",
            "itemtype": "method",
            "name": "toElement",
            "return": {
                "description": "A DOM element that can be further manipulated\nwith DOM methods",
                "type": "Element"
            },
            "access": "protected",
            "tagname": "",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 99,
            "description": "Takes an association element in XML and then converts that into\nan AssociationEditor object. Intended to be one of the ways the\nobject is constructed",
            "itemtype": "method",
            "name": "_fromElement",
            "params": [
                {
                    "name": "element",
                    "description": "The XML element that represents an association.",
                    "type": "Element"
                }
            ],
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 131,
            "description": "The information for a given namespace. Includes both the\ndata, and the attributes. Namespaces URIs must be unique or\nthey will overwrite data from another namespace",
            "itemtype": "property",
            "name": "namespace.URI",
            "type": "Object",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 146,
            "description": "The attributes of the current namespace, with each attribute\nhaving a corresponding value.",
            "itemtype": "property",
            "name": "namespace.URI.attributes",
            "type": "Object",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 157,
            "description": "This is the namespace data stored within the namespace\nelement. Anything can be put here, and it will be stored as a\nstring. ItemMirror will not do anything with the data here and\ndoesn't interact with it at all. It is the responsibility of\nother applications to properly store information here.",
            "itemtype": "property",
            "name": "namespace.URI.data",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 170,
            "description": "Constructs an association with data from an object",
            "itemtype": "method",
            "name": "_fromOptions",
            "params": [
                {
                    "name": "commonData",
                    "description": "Common data that is used by the\nitemMirror library, and is app agnostic",
                    "type": "Object",
                    "props": [
                        {
                            "name": "displayText",
                            "description": "Display text for the\n association",
                            "type": "String"
                        },
                        {
                            "name": "associatedXooMLFragment",
                            "description": "URI of the\n associated XooML fragment for the association",
                            "type": "String"
                        },
                        {
                            "name": "associatedItem",
                            "description": "URI of the associated item",
                            "type": "String"
                        },
                        {
                            "name": "associatedXooMLDriver",
                            "description": "The associated\n XooML driver for the association",
                            "type": "String"
                        },
                        {
                            "name": "associatedItemDriver",
                            "description": "The associated\n item driver for the association",
                            "type": "String"
                        },
                        {
                            "name": "associatedSyncDriver",
                            "description": "The associated\n sync driver of the association",
                            "type": "String"
                        },
                        {
                            "name": "localItem",
                            "description": "The name/id of the\n association",
                            "type": "String"
                        },
                        {
                            "name": "readOnlyURLtoXooMLfragment",
                            "description": "Used in\n cases where the owner wishes for the XooML fragment representing\n an item to be public",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "comnmonData.isGrouping",
                    "description": "Whether or not the\n association is a grouping item",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 203,
            "description": "Common Data of the association that is accessible to all applications",
            "itemtype": "property",
            "name": "commonData",
            "type": "Object",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 209,
            "description": "Text that describes the association",
            "itemtype": "property",
            "name": "commonData.displayText",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 216,
            "description": "The associated XooML fragment of the association",
            "itemtype": "property",
            "name": "commonData.associatedXooMLFragment",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 223,
            "description": "The associated XooML driver of the association",
            "itemtype": "property",
            "name": "commonData.associatedXooMLDriver",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 230,
            "description": "The associated sync driver of the association",
            "itemtype": "property",
            "name": "commonData.associatedSyncDriver",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 237,
            "description": "The associated item driver of the association",
            "itemtype": "property",
            "name": "commonData.associatedItemDriver",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 244,
            "description": "The associated item of the association",
            "itemtype": "property",
            "name": "commonData.associatedItem",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 251,
            "description": "The local item of the association",
            "itemtype": "property",
            "name": "commonData.localItem",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 258,
            "description": "Whether or not the item is a grouping item",
            "itemtype": "property",
            "name": "commonData.isGrouping",
            "type": "Boolean",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 265,
            "description": "The GUID of the association",
            "itemtype": "property",
            "name": "commonData.ID",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 274,
            "description": "Data for the namespaces. Stored as a key pair value, with each\nnamespace referencing the namespace association element for the\ncorresponding namespace.",
            "itemtype": "property",
            "name": "namespace",
            "type": "Object",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 283,
            "description": "The attributes of the current namespace, with each attribute\nhaving a corresponding value.",
            "itemtype": "property",
            "name": "namespace.URI.attributes",
            "type": "Object",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/AssociationEditor.js",
            "line": 290,
            "description": "This is the namespace data stored within the namespace\nelement. Anything can be put here, and it will be stored as a\nstring. ItemMirror will not do anything with the data here and\ndoesn't interact with it at all. It is the responsibility of\nother applications to properly store information here.",
            "itemtype": "property",
            "name": "namespace.URI.data",
            "type": "String",
            "class": "AssociationEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 75,
            "description": "Updates the GUID of the Fragment",
            "itemtype": "method",
            "name": "updateID",
            "return": {
                "description": "The new GUID of the fragment",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 91,
            "description": "Converts a FragmentEditor object into an XML element, which can\nthen be serialized and saved as a string, or further manipulated\nwith DOM methods",
            "itemtype": "method",
            "name": "toElement",
            "return": {
                "description": "The XooML fragment as an XML element",
                "type": "Element"
            },
            "access": "protected",
            "tagname": "",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 132,
            "description": "Returns the XML of a fragment as a string, _not_ the string\nversion of the object. This is used for persisting the fragment\nacross multiple platforms",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Fragment XML",
                "type": "String"
            },
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 144,
            "description": "Constructs a fragmentEditor based on data passed into the\nparameters",
            "itemtype": "method",
            "name": "_fromOptions",
            "params": [
                {
                    "name": "commonData",
                    "description": "An object containing common data for the association",
                    "type": "Object",
                    "props": [
                        {
                            "name": "schemaVersion",
                            "description": "The version of the schema <br/> __required__",
                            "type": "String"
                        },
                        {
                            "name": "schemaLocation",
                            "description": "The location of the schema",
                            "type": "String"
                        },
                        {
                            "name": "itemDescribed",
                            "description": "URI pointing to item for which the\n XooML fragment is metadata.",
                            "type": "String"
                        },
                        {
                            "name": "displayName",
                            "description": "Display name of the fragment",
                            "type": "String"
                        },
                        {
                            "name": "itemDriver",
                            "description": "The URI of the item driver for the fragment",
                            "type": "String"
                        },
                        {
                            "name": "syncDriver",
                            "description": "The URI of the sync driver for the fragment",
                            "type": "String"
                        },
                        {
                            "name": "xooMLDriver",
                            "description": "The URI of the XooML driver for the fragment",
                            "type": "String"
                        },
                        {
                            "name": "GUIDGeneratedOnLastWrite",
                            "description": "The GUID generated the last time the fragment was written",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "associations",
                    "description": "An array of associations that the fragment has",
                    "type": "AssociationEditor[]"
                },
                {
                    "name": "namespace",
                    "description": "The namespace URI that an app will use for it's own private data",
                    "type": "String"
                },
                {
                    "name": "self",
                    "description": "",
                    "type": "FragmentEditor"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 172,
            "description": "Common Data of the association that is accessible to all applications",
            "itemtype": "property",
            "name": "commonData",
            "type": "Object",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 178,
            "description": "Text that describes the fragment",
            "itemtype": "property",
            "name": "commonData.displayName",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 185,
            "description": "The schema location for the fragment",
            "itemtype": "property",
            "name": "commonData.schemaLocation",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 192,
            "description": "The schema version for the fragment",
            "itemtype": "property",
            "name": "commonData.schemaVersion",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 199,
            "description": "The item driver URI for the fragment",
            "itemtype": "property",
            "name": "commonData.itemDriver",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 206,
            "description": "The item described for the fragment. This is a URI that\npoints to grouping item from wich the itemMirror was created",
            "itemtype": "property",
            "name": "commonData.",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 214,
            "description": "The sync driver URI for the fragment",
            "itemtype": "property",
            "name": "commonData.syncDriver",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 221,
            "description": "The XooML driver URI for the fragment",
            "itemtype": "property",
            "name": "commonData.xooMLDriver",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 228,
            "description": "The unique GUID for the fragment that is updated after every\nwrite",
            "itemtype": "property",
            "name": "commonData.GUIDGeneratedOnLastWrite",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 237,
            "description": "The associations of the fragment. Each association is accessed\nby referencing it's ID, which then gives the corresponding\nAssociationEditor object for manipulating that association.",
            "itemtype": "property",
            "name": "associations",
            "type": "Object",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 253,
            "description": "The namespace data of the fragment. Holds both the URI as well\nas the namespace specific data for the fragment",
            "itemtype": "property",
            "name": "namespace",
            "type": "Object",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 260,
            "description": "The namespace URI for the fragment. Used to set namespace data\nfor both the fragment and it's associations",
            "itemtype": "property",
            "name": "namespace.uri",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 267,
            "description": "The attributes of the namespace. This is app specific data\nthat is set for the fragment. Each key pair in the object\nrepresents an attribute name and it's corresponding value",
            "itemtype": "property",
            "name": "namespace.attributes",
            "type": "Object",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 276,
            "description": "Takes a fragment in the form of a string and then parses that\ninto XML. From there it converts that element into an object\nusing the _fromElement method",
            "params": [
                {
                    "name": "text",
                    "description": "The text representing the fragment. Should\nbe obtained directly from a storage platform like dropbox or a\nlocal filesystem",
                    "type": "String"
                },
                {
                    "name": "namespace",
                    "description": "The URI of the namespace that will\ninitially be used for the fragment when handling any namespace\ndata",
                    "type": "String"
                },
                {
                    "name": "self",
                    "description": "",
                    "type": "FragmentEditor"
                }
            ],
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 295,
            "description": "Takes a fragment element in XML and then converts that into a\nFragmentEditor object. Intended to be one of the ways the object\nis constructed",
            "itemtype": "method",
            "name": "_fromElement",
            "params": [
                {
                    "name": "element",
                    "description": "The XML element that represents an association.",
                    "type": "Element"
                },
                {
                    "name": "self",
                    "description": "",
                    "type": "FragmentEditor"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 321,
            "description": "The namespace object is an associated array with each key being\na namespace URI. These can thene be used to modify fragment\nnamespace attributes and data",
            "itemtype": "property",
            "name": "namespace",
            "type": "Object",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 335,
            "description": "The information for a given namespace. Includes both the\ndata, and the attributes. Namespaces URIs must be unique or\nthey will overwrite data from another namespace",
            "itemtype": "property",
            "name": "namespace.URI",
            "type": "Object",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 350,
            "description": "The attributes of the current namespace, with each attribute\nhaving a corresponding value.",
            "itemtype": "property",
            "name": "namespace.URI.attributes",
            "type": "Object",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/FragmentEditor.js",
            "line": 361,
            "description": "This is the namespace data stored within the namespace\nelement. Anything can be put here, and it will be stored as a\nstring. ItemMirror will not do anything with the data here and\ndoesn't interact with it at all. It is the responsibility of\nother applications to properly store information here.",
            "itemtype": "property",
            "name": "namespace.URI.data",
            "type": "String",
            "class": "FragmentEditor"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 40,
            "description": "Constructs a ItemDriver for reading/writing Item Storage",
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 99,
            "description": "Creates a grouping item at the location",
            "itemtype": "method",
            "name": "createGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the grouping item will be created",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 118,
            "description": "Creates or uploads a non-grouping item at the location",
            "itemtype": "method",
            "name": "createNonGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the non-grouping item will be created",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "the contents to be written to the non-grouping item",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 138,
            "description": "Deletes a grouping item at the location",
            "itemtype": "method",
            "name": "deleteGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the grouping item is located",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 157,
            "description": "Deletes a non-grouping item at the location",
            "itemtype": "method",
            "name": "deleteNonGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the non-grouping item is located",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the name of the non-grouping item",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 177,
            "description": "Copies an item in the fashion of moveItem",
            "itemtype": "method",
            "name": "copyItem",
            "params": [
                {
                    "name": "fromPath",
                    "description": "the path to the file you want copied",
                    "type": "String"
                },
                {
                    "name": "toPath",
                    "description": "the GroupingItem path you want the fromPath file copied to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 197,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveItem",
            "params": [
                {
                    "name": "fromPath",
                    "description": "the path to the file you want moved",
                    "type": "String"
                },
                {
                    "name": "toPath",
                    "description": "the GroupingItem path you want the fromPath file moved",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 217,
            "description": "Get publicly readable download url for a non-grouping item from Dropbox website.",
            "itemtype": "method",
            "name": "getURL",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the non-grouping item is located",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 236,
            "description": "Lists the items under the grouping item",
            "itemtype": "method",
            "name": "listItems",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the grouping item",
                    "type": "String"
                },
                {
                    "name": "callback(output)",
                    "description": "Function to be called when self function is finished with it's operation. Output is an array of AssociationEditors.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemDriver.js",
            "line": 270,
            "description": "Check if the item is existed",
            "itemtype": "method",
            "name": "checkExisted",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the item is located",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the name of the item",
                    "type": "String"
                },
                {
                    "name": "callback(result)",
                    "description": "Function to be called when self function is finished with it's operation. Result is the bollean value for whether existed.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ItemDriver"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 205,
            "itemtype": "method",
            "name": "getDisplayName",
            "return": {
                "description": "The display name of the fragment.",
                "type": "String"
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 213,
            "itemtype": "method",
            "name": "setDisplayName",
            "params": [
                {
                    "name": "name",
                    "description": "The display text to set for the fragment",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 221,
            "itemtype": "method",
            "name": "getSchemaVersion",
            "return": {
                "description": "XooML schema version.",
                "type": "String"
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 230,
            "itemtype": "method",
            "name": "getSchemaLocation",
            "return": {
                "description": "XooML schema location.",
                "type": "String"
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 239,
            "description": "Returns URI pointing to item described by the metadata of a fragment. A URI\nmight point to just about anything that can be interpreted as a grouping\nitem. For example: a conventional file system folder or a “tag as\nsupported by any of several applications.",
            "itemtype": "method",
            "name": "getURIforItemDescribed",
            "return": {
                "description": "A URI pointing to item described by the metadata\nof a fragment if it exists, else returns null.",
                "type": "String"
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 254,
            "description": "Throws NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationDisplayText",
            "return": {
                "description": "The display text for the association with the given GUID.",
                "type": "String"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID representing the desired association.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 269,
            "description": "Sets the display text for the association with the given GUID.\n\nThrows NullArgumentException if GUID or displayName is null. <br/>\nThrows InvalidTypeException if GUID or displayName is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationDisplayText",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to set.",
                    "type": "String"
                },
                {
                    "name": "displayText",
                    "description": "Display text to be set.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 285,
            "description": "Throws NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationLocalItem",
            "return": {
                "description": "The local item for the association with the given GUID.",
                "type": "String"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 299,
            "description": "Throws NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationAssociatedItem",
            "return": {
                "description": "The associated item for the association with the given GUID.",
                "type": "String"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 312,
            "itemtype": "method",
            "name": "getFragmentNamespaceAttribute",
            "return": {
                "description": "Returns the value of the given attributeName for the\nfragmentNamespaceData with the given namespaceURI.",
                "type": "String"
            },
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be returned.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 327,
            "description": "Sets the value of the given attributeName with the given attributeValue\nfor the fragmentNamespaceData with the given namespaceURI.\n\nThrows NullArgumentException if attributeName, attributeValue, or\nnamespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName, attributeValue, or\nnamespaceURI is not a String. <br/>",
            "itemtype": "method",
            "name": "setFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 349,
            "description": "Adds the given attributeName to the fragment's current namespace\n\nThrows an InvalidStateException when the attribute already exists",
            "itemtype": "method",
            "name": "addFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 371,
            "description": "Removes the fragment namespace attribute with the given namespaceURI.\n\nThrows NullArgumentException if attributeName, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, or namespaceURI is not\na String. <br/>\nThrows an InvalidStateException when the given attributeName is not an\nattribute. <br/>",
            "itemtype": "method",
            "name": "removeFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 390,
            "description": "Checks if the fragment has the given namespaceURI.\n\nCurrently cannot find a way to list the namespaces (no DOM\nstandard method for doing so). So this fuction will ALWAYS RETURN\nFALSE for now.",
            "itemtype": "method",
            "name": "hasFragmentNamespace",
            "return": {
                "description": "True if the fragment has the given\nnamespaceURI, otherwise false.",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "uri",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 410,
            "itemtype": "method",
            "name": "listFragmentNamespaceAttributes",
            "return": {
                "description": "An array of the attributes within the\nfragmentNamespaceData with the given namespaceURI.",
                "type": "String[]"
            },
            "params": [
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 421,
            "itemtype": "method",
            "name": "getFragmentNamespaceData",
            "return": {
                "description": "The fragment namespace data with the given namespace URI.",
                "type": "String"
            },
            "params": [
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 430,
            "description": "Sets the fragment namespace data with the given namespaceURI.",
            "itemtype": "method",
            "name": "setFragmentNamespaceData",
            "params": [
                {
                    "name": "data",
                    "description": "Fragment namespace data to be set.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 445,
            "description": "Creates an ItemMirror from the associated grouping item represented by\nthe given GUID.\n\nThrows NullArgumentException if GUID or callback is null. <br/>\nThrows InvalidTypeException if GUID is not a string, and callback is\nnot a function. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "createItemMirrorForAssociatedGroupingItem",
            "return": {
                "description": "Possibly return an itemMirror if the GUID is a grouping item",
                "type": "ItemMirror"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to create the ItemMirror\n                from.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 505,
            "description": "Creates an association based on the given options and the following\ncases.\n\nCases 1, 2, 7 implemented. All else are not implemented.\n\n1. Simple text association declared phantom. <br/>\n2. Link to existing non-grouping item, phantom. This can be a URL <br/>\n3. Link to existing non-grouping item, real. <br/>\n4. Link to existing grouping item, phantom. <br/>\n5. Link to existing grouping item, real. <br/>\n6. Create new local non-grouping item. <br/>\n7. Create new local grouping item. <br/>\n\nThrows NullArgumentException when options, or callback is null. <br/>\nThrows InvalidTypeException when options is not an object and callback\nis not a function. <br/>\nThrows MissingParameterException when an argument is missing for an expected\ncase. <br/>",
            "itemtype": "method",
            "name": "createAssociation",
            "params": [
                {
                    "name": "options",
                    "description": "Data to create an new association for.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "displayText",
                            "description": "Display text for the association.\n                  Required in all cases.",
                            "type": "String"
                        },
                        {
                            "name": "itemURI",
                            "description": "URI of the item. Required for case 2 & 3. Note: Please ensure \"http://\" prefix exists at the beginning of the string when referencing a Web URL and not an Item.",
                            "type": "String"
                        },
                        {
                            "name": "localItemRequested",
                            "description": "True if the local item is\n                  requested, else false. Required for cases 2 & 3.",
                            "type": "Boolean"
                        },
                        {
                            "name": "groupingItemURI",
                            "description": "URI of the grouping item.\n                  Required for cases 4 & 5.",
                            "type": "String"
                        },
                        {
                            "name": "xooMLDriverURI",
                            "description": "URI of the XooML driver for the\n                  association. Required for cases 4 & 5.",
                            "type": "String"
                        },
                        {
                            "name": "localItem",
                            "description": "URI of the new local\n                  non-grouping/grouping item. Required for cases 6 & 7.",
                            "type": "String"
                        },
                        {
                            "name": "isGroupingItem",
                            "description": "True if the item is a grouping\n                  item, else false. Required for cases 6 & 7.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "GUID",
                            "description": "GUID of the association created.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 620,
            "itemtype": "method",
            "name": "isAssociationPhantom",
            "params": [
                {
                    "name": "guid",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the association of the given GUID is a\nphantom association. False otherwise.",
                "type": "Boolean"
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 631,
            "description": "Duplicates (copies) an association to another ItemMirror Object (representing a grouping item)\n\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "copyAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association you wish to copy/duplicate",
                    "type": "String"
                },
                {
                    "name": "ItemMirror",
                    "description": "ItemMirror representing the grouping item you want to move the GUID object to",
                    "type": "ItemMirror"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error Null if no error has occurred\n                in executing this function, else it contains\n                an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 696,
            "description": "Moves an association to another ItemMirror Object (representing a grouping item)\n\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "moveAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the item you want to paste or move",
                    "type": "String"
                },
                {
                    "name": "ItemMirror",
                    "description": "ItemMirror representing the grouping item you want to move the GUID object to",
                    "type": "ItemMirror"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error Null if no error has occurred\n                in executing this function, else it contains\n                an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 767,
            "description": "Deletes the association represented by the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "deleteAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to be deleted.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 829,
            "description": "Upgrades a given association without a local item. Local item is named\nby a truncated form of the display name of this ItemMirror if the\nlocalItemURI is not given, else uses given localItemURI. Always\ntruncated to 50 characters.\n\nONLY SUPPORTS SIMPLE PHANTOM ASSOCIATION TO ASSOCIATION WITH GROUPING ITEM\n\nThrows NullArgumentException when options is null. <br/>\nThrows MissingParameterException when options is not null and a required\nargument is missing.<br/>\nThrows InvalidTypeException if GUID is not a string, and if callback\nis not a function. <br/>\nThrows InvalidState if the association with the given GUID cannot be\nupgraded. <br/>",
            "itemtype": "method",
            "name": "upgradeAssociation",
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new ItemMirror with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "GUID",
                            "description": "of the association to be upgraded. Required",
                            "type": "String"
                        },
                        {
                            "name": "localItemURI",
                            "description": "URI of the local item to be used if\n                 a truncated display name is not the intended behavior.\n                 Optional.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 885,
            "description": "Renames the local item for the association with the given GUID.\n\nThrows NullArgumentException if GUID, callback is null. <br/>\nThrows InvalidTypeException if GUID is not a String, and if callback\nis not a function. <br/>",
            "itemtype": "method",
            "name": "renameAssocaitionLocalItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "String",
                    "description": "String Name you want to rename the file to (including file extension)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "GUID",
                            "description": "The GUID of the association that was updated.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 941,
            "description": "A special method that is used for certain file operations where\ncalling a sync won't work. Essentially it is the save function,\nsans syncing. This should __never__ be called be an application.",
            "itemtype": "method",
            "name": "_unsafeWrite",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "calback.error",
                    "description": ""
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 971,
            "description": "Checks if an association's associatedItem is a grouping item\n\nThrows NullArgumentException if GUID, callback is null. <br/>\nThrows InvalidTypeException if GUID is not a String, and if callback\nis not an function. <br/>",
            "itemtype": "method",
            "name": "isAssociationAssociatedItemGrouping",
            "return": {
                "description": "True if the association with the given GUID's associatedItem is a grouping\nitem, otherwise false.",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to be to be checked.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 989,
            "description": "Lists the GUIDs of each association.",
            "itemtype": "method",
            "name": "listAssociations",
            "return": {
                "description": "Array of the GUIDs of each association",
                "type": "String[]"
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1000,
            "description": "Throws NullArgumentException if attributeName, GUID, or namespaceURI is\n null. <br/>\n Throws InvalidTypeException if attributeName, GUID, or namespaceURI is not\n a String. <br/>\n Throws InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationNamespaceAttribute",
            "return": {
                "description": "The association namespace attribute with\n the given attributeName and the given namespaceURI within the\n association with the given GUID.",
                "type": "String"
            },
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be returned.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association to return attribute from.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namspace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1026,
            "description": "Sets the association namespace attribute with the given attributeName\nand the given namespaceURI within the association with the given GUID.\n\nThrows NullArgumentException if attributeName, attributeValue, GUID, or\nnamespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName, attributeValue, GUID, or\nnamespaceURI is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribute to be set",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of association to set attribute for.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1052,
            "description": "Adds the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName has already\nbeen added. <br/>",
            "itemtype": "method",
            "name": "addAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribe to be set",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1082,
            "description": "Removes the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName is not an\nattribute. <br/>",
            "itemtype": "method",
            "name": "removeAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1104,
            "itemtype": "method",
            "name": "hasAssociationNamespace",
            "return": {
                "description": "True if the association has the given\nnamespaceURI, else false.",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1119,
            "description": "Throws NullArgumentException if GUID, namespaceURI is null. <br/>\n Throws InvalidTypeException if GUID, namespaceURI is not a String. <br/>\n Throws InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "listAssociationNamespaceAttributes",
            "return": {
                "description": "An array of the association namespace\n attributes with the given attributeName and the given\n namespaceURI within the association with the given GUID.",
                "type": "String[]"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of association to list attributes for.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1141,
            "description": "Throws InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationNamespaceData",
            "return": {
                "description": "The association namespace data for an\nassociation with the given GUID and the given namespaceURI.",
                "type": "String"
            },
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association namespace data to\nreturned.",
                    "type": "String"
                },
                {
                    "name": "uri",
                    "description": "Namespace URI",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1160,
            "description": "Sets the association namespace data for an association with the given GUID\nand given namespaceURI using the given data.\n\nThrows NullArgumentException if data, GUID, or namespaceURI is null. <br/>\nThrows InvalidTypeException if data, GUID, or namespaceURI is not a\nString. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationNamespaceData",
            "params": [
                {
                    "name": "data",
                    "description": "Association namespace data to set. Must be\n                              valid fragmentNamespaceData.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association namespace data to set.",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1183,
            "description": "Uses the specified ItemDriver and SyncDriver to synchronize the\nlocal ItemMirror object changes. This is an implmentation of Synchronization\nDriver which modifies the XooML Fragment according to the real structure\nunder the item described.",
            "itemtype": "method",
            "name": "sync",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1203,
            "description": "Reloads the XooML Fragment",
            "itemtype": "method",
            "name": "refresh",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1236,
            "itemtype": "method",
            "name": "getCreator",
            "return": {
                "description": "The itemMirror that created this current\nitemMirror, if it has one. Note that this isn't the same as\nasking for a 'parent,' since multiple itemMirrors can possibly\nlink to the same one",
                "type": "Object"
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1250,
            "description": "Saves the itemMirror object, writing it out to the\nfragment. Fails if the GUID generated on last write for the\nitemMirror and the XooML fragment don't match.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "props": [
                        {
                            "name": "error",
                            "description": "Returns false if everything went ok,\n otherwise returns the error"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/ItemMirror.js",
            "line": 1277,
            "description": "Checks if the AssociatedItem String passed into it is a URL or not.",
            "itemtype": "method",
            "name": "_isURL",
            "return": {
                "description": "True if it is an HTTP URL, false otherwise\n(HTTPS will fail)",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "URL",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 29,
            "description": "Takes two paths and joins them together.",
            "itemtype": "method",
            "name": "joinPath",
            "return": {
                "description": "The two joined paths",
                "type": "String"
            },
            "params": [
                {
                    "name": "root",
                    "description": "The root path to join",
                    "type": "String"
                },
                {
                    "name": "leaf",
                    "description": "The leaf path to join",
                    "type": "String"
                }
            ],
            "example": [
                "\n    joinPath('/foo/', '/bar/');\n    // returns '/foo/bar/'"
            ],
            "access": "protected",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 57,
            "description": "Takes an array of paths and joins them all together.\n\nCurrently unimplemented and throws notImplemented exception if\ncalled.",
            "itemtype": "method",
            "name": "joinPathArrays",
            "access": "protected",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 71,
            "description": "Splits a path into an array of the different folders in that\npath; including the root if present.",
            "itemtype": "method",
            "name": "splitPath",
            "return": {
                "description": "An array of split up paths",
                "type": "[String]"
            },
            "params": [
                {
                    "name": "path",
                    "description": "The path to be split",
                    "type": "String"
                }
            ],
            "example": [
                "\n    joinPath('/foo/bar/baz');\n    // returns ['', 'foo', 'bar', 'baz']"
            ],
            "access": "protected",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 90,
            "description": "Formats a path by removing any trailing slashes.",
            "itemtype": "method",
            "name": "formatPath",
            "return": {
                "description": "The well formatted path",
                "type": "String"
            },
            "params": [
                {
                    "name": "path",
                    "description": "The path to be formatted",
                    "type": "String"
                }
            ],
            "example": [
                "\n    format('/foo/bar/');\n    // returns '/foo/bar'"
            ],
            "access": "protected",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 108,
            "itemtype": "method",
            "name": "isRoot",
            "return": {
                "description": "True if root, false otherwise",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "path",
                    "description": "Path to test for root",
                    "type": "String"
                }
            ],
            "example": [
                "\n    format('/');\n    // returns true, anything else will return false"
            ],
            "access": "protected",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 124,
            "itemtype": "method",
            "name": "getPathSeparator",
            "return": {
                "description": "The character that is used as a path separator",
                "type": "String"
            },
            "example": [
                "\n    getPathSeparator();\n    // returns '/'"
            ],
            "access": "protected",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 138,
            "itemtype": "method",
            "name": "_stripTrailingSlash",
            "return": {
                "description": "The path without any trailing slash",
                "type": "String"
            },
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/PathDriver.js",
            "line": 161,
            "itemtype": "method",
            "name": "_stripLeadingSlash",
            "return": {
                "description": "The path without any leading slash",
                "type": "String"
            },
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "PathDriver"
        },
        {
            "file": "scripts/SyncDriver.js",
            "line": 44,
            "description": "Helper method that allows for sorting of objects by the localItem",
            "itemtype": "method",
            "name": "_nameCompare",
            "access": "protected",
            "tagname": "",
            "class": "SyncDriver"
        },
        {
            "file": "scripts/SyncDriver.js",
            "line": 57,
            "description": "Synchonizes the itemMirror object.",
            "itemtype": "method",
            "name": "sync",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SyncDriver"
        },
        {
            "file": "scripts/XooMLDriver.js",
            "line": 36,
            "description": "Constructs a XooMLDriver for reading/writing XooML fragment.",
            "access": "protected",
            "tagname": "",
            "class": "XooMLDriver"
        },
        {
            "file": "scripts/XooMLDriver.js",
            "line": 66,
            "description": "Reads and returns a XooML fragment",
            "itemtype": "method",
            "name": "getXooMLFragment",
            "params": [
                {
                    "name": "callback(content)",
                    "description": "Function to be called when self function is finished with it's operation. content is the content of the XooML fragment.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "XooMLDriver"
        },
        {
            "file": "scripts/XooMLDriver.js",
            "line": 84,
            "description": "Writes a XooML fragment",
            "itemtype": "method",
            "name": "setXooMLFragment",
            "params": [
                {
                    "name": "uri",
                    "description": "the location of the XooML fragment",
                    "type": "String"
                },
                {
                    "name": "fragment",
                    "description": "the content of the XooML fragment",
                    "type": "String"
                },
                {
                    "name": "callback(content)",
                    "description": "Function to be called when self function is finished with it's operation. content is the content of the XooML fragment.",
                    "type": "Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "XooMLDriver"
        },
        {
            "file": "scripts/XooMLDriver.js",
            "line": 105,
            "description": "Check if the XooML fragment exists",
            "itemtype": "method",
            "name": "checkExists",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to be called when\nself function is finished with it's operation.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Dropbox error if there is one",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "True if the fragment exists and\n false otherwis",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "XooMLDriver"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 12,
            "description": "Thrown when a method is not yet implemented.",
            "itemtype": "event",
            "name": "NotImplementedException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 21,
            "description": "Thrown when a required property from a method's options is missing.",
            "itemtype": "event",
            "name": "MissingParameterException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 30,
            "description": "Thrown when an argument is given a null value when it does not accept null\nvalues.",
            "itemtype": "event",
            "name": "NullArgumentException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 40,
            "description": "Thrown when an argument is given a value with a different type from the\nexpected type.",
            "itemtype": "event",
            "name": "InvalidTypeException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 50,
            "description": "Thrown when an a method is called when the object is in invalid state\ngiven what the method expected.",
            "itemtype": "event",
            "name": "InvalidStateArgument",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 60,
            "description": "Thrown after receiving an exception from XooMLU Storage",
            "itemtype": "event",
            "name": "XooMLUException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 69,
            "description": "Thrown after receiving an exception from ItemU Storage",
            "itemtype": "event",
            "name": "ItemUException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 78,
            "description": "Thrown after an association was upgraded that could not be upgraded.",
            "itemtype": "event",
            "name": "NonUpgradeableAssociationException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 87,
            "description": "Thrown after an argument was passed in an invalid state than expected.",
            "itemtype": "event",
            "name": "InvalidArgumentException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 96,
            "description": "Thrown after expecting a file or folder not to exist when it does.",
            "itemtype": "event",
            "name": "FileOrFolderAlreadyExistsException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLExceptions.js",
            "line": 105,
            "description": "Thrown when expecting the ItemMirror to be current, and it is not.",
            "itemtype": "event",
            "name": "FileOrFolderAlreadyExistsException",
            "access": "protected",
            "tagname": "",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts/XooMLUtil.js",
            "line": 33,
            "description": "Checks if each option within the given checkedOptions is a property of\nthe given options.",
            "itemtype": "method",
            "name": "hasOptions",
            "params": [
                {
                    "name": "checkedOptions",
                    "description": "Array of strings for each expected option.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options given to a function.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "XooMLUtil"
        },
        {
            "file": "scripts/XooMLUtil.js",
            "line": 97,
            "description": "Returns if the given value is an array.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "XooMLUtil"
        },
        {
            "file": "scripts/XooMLUtil.js",
            "line": 112,
            "description": "Returns if the given value is an object.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the given value is an Object, else false.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "XooMLUtil"
        },
        {
            "file": "scripts/XooMLUtil.js",
            "line": 129,
            "description": "Returns if the given value is an function.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the given value is a Function, else false.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "XooMLUtil"
        },
        {
            "file": "scripts/XooMLUtil.js",
            "line": 147,
            "description": "Returns if the given value is an string.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the given value is a String, else false.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "XooMLUtil"
        },
        {
            "file": "scripts/XooMLUtil.js",
            "line": 168,
            "description": "Generates a GUID.",
            "itemtype": "method",
            "name": "generateGUID",
            "return": {
                "description": "Randomly generated GUID.",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "XooMLUtil"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " scripts/AssociationEditor.js:58"
        },
        {
            "message": "Missing item type\nTakes a fragment in the form of a string and then parses that\ninto XML. From there it converts that element into an object\nusing the _fromElement method",
            "line": " scripts/FragmentEditor.js:276"
        },
        {
            "message": "Missing item type\nConstructs a ItemDriver for reading/writing Item Storage",
            "line": " scripts/ItemDriver.js:40"
        },
        {
            "message": "Missing item type\nConstructs a XooMLDriver for reading/writing XooML fragment.",
            "line": " scripts/XooMLDriver.js:36"
        }
    ]
}
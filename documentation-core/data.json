{
    "project": {
        "name": "ItemMirror",
        "description": "ItemMirror: a library for working with XooML to promote open cross platform tool usage",
        "version": "0.8.2",
        "url": "https://bitbucket.org/xooml2team/xooml2"
    },
    "files": {
        "scripts\\FragmentDriver.js": {
            "name": "scripts\\FragmentDriver.js",
            "modules": {},
            "classes": {
                "FragmentDriver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\ItemDriver.js": {
            "name": "scripts\\ItemDriver.js",
            "modules": {},
            "classes": {
                "ItemDriver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\ItemMirror.js": {
            "name": "scripts\\ItemMirror.js",
            "modules": {},
            "classes": {
                "ItemMirror": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\XooMLAssociation.js": {
            "name": "scripts\\XooMLAssociation.js",
            "modules": {},
            "classes": {
                "XooMLAssociation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\XooMLConfig.js": {
            "name": "scripts\\XooMLConfig.js",
            "modules": {},
            "classes": {
                "XooMLConfig": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\XooMLDriver.js": {
            "name": "scripts\\XooMLDriver.js",
            "modules": {},
            "classes": {
                "XooMLDriver": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\XooMLExceptions.js": {
            "name": "scripts\\XooMLExceptions.js",
            "modules": {},
            "classes": {
                "XooMLExceptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "scripts\\XooMLUtil.js": {
            "name": "scripts\\XooMLUtil.js",
            "modules": {},
            "classes": {
                "XooMLUtil": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "FragmentDriver": {
            "name": "FragmentDriver",
            "shortname": "FragmentDriver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\FragmentDriver.js",
            "line": 1,
            "description": "Constructs a FragmentWrapper for a XooML fragment. In the following cases.\n\nCase 1: xooMLFragmentString is given and is used as the XooMLFragment. <br/>\nCase 2: associations, xooMLUtilityURI, itemUtilityURI, syncUtilityURI,\ngroupingItemURI are given and used to create a new XooMLFragment with\nthe given data.\n\nThrows NullArgumentException when options is null. <br/>\nThrows MissingParameterException when options is not null and does not have\nthe necessary arguments for any given case. <br/>",
            "is_constructor": 1,
            "async": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new FragmentWrapper with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "xooMLFragmentString",
                            "description": "XML string representing a XooML2\n                  fragment. Required for case 1.",
                            "type": "String"
                        },
                        {
                            "name": "associations",
                            "description": "List of associations for\n         the newly constructed XooMLFragment in case 2. Required in Case 2.",
                            "type": "XooMLAssociation[]"
                        },
                        {
                            "name": "xooMLUtilityURI",
                            "description": "URI for the XooMLUtility for the\n         newly constructed XooMLFragment in case 2. Required in Case 2.",
                            "type": "String"
                        },
                        {
                            "name": "itemUtilityURI",
                            "description": "URI for the ItemUtility for the\n         newly constructed XooMLFragment in case 2. Required in Case 2.",
                            "type": "String"
                        },
                        {
                            "name": "syncUtilityURI",
                            "description": "URI for the SyncUtility for the\n         newly constructed XooMLFragment in case 2. Required in Case 2.",
                            "type": "String"
                        },
                        {
                            "name": "groupingItemURI",
                            "description": "URI for the Grouping Item for the\n         newly constructed XooMLFragment in case 2. Required in Case 2.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error to the callback",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "ItemDriver": {
            "name": "ItemDriver",
            "shortname": "ItemDriver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\ItemDriver.js",
            "line": 1,
            "description": "An item utility interacts with the item storage and is responsible for\ncreating and deleting items. This is an implementation of item utility\nusing Dropbox as the item storage.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new ItemU with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "utilityURI",
                            "description": "URI of the utility",
                            "type": "String"
                        },
                        {
                            "name": "dropboxClient",
                            "description": "Authenticated dropbox client",
                            "type": "Object"
                        }
                    ]
                }
            ]
        },
        "ItemMirror": {
            "name": "ItemMirror",
            "shortname": "ItemMirror",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\ItemMirror.js",
            "line": 1,
            "description": "ItemMirror represents an Item according to the XooML2 specification.\n\nIt can be instantiated using one of the following two cases based on the\ngiven arguments.\n\nCase 1: XooMLFragment already exists. Given xooMLFragmentURI and xooMLDriver.\n<br/>\nCase 2: The XooMLFragment is created from an existing groupingItemURI.\nGiven a groupingItemURI, saveLocationURI. Optionally a itemDriver,\nsyncDriver, and a xooMLDriver can be supplied for the XooMLFragment.\n<br/>\nCase 3: Try case 1, and then fallback on case 2.\n\nThrows NullArgumentException when options is null. <br/>\nThrows MissingParameterException when options is not null and a required\nargument is missing.<br/>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new ItemMirror with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "groupingItemURI",
                            "description": "URI to the grouping item. Required\n                 for all cases.",
                            "type": "String"
                        },
                        {
                            "name": "itemDriver",
                            "description": "Data for the ItemDriver to\n                 construct ItemMirror with. Required for all cases.\n                 Can contain any amount of optional key/value pairs for\n                 the various Driver implementations.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "driverURI",
                                    "description": "URI of the driver.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "xooMLDriver",
                            "description": "Data for the XooMLDriver to\n                 construct ItemMirror with. Required for all cases.\n                 Can contain any amount of optional key/value pairs for\n                 the various Driver implementations.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "driverURI",
                                    "description": "URI of the driver.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "syncDriver",
                            "description": "Data for the SyncDriver to\n                 construct ItemMirror with. Required Case 2 & 3. Can\n                 contain any amount of optional key/value pairs for\n                 the various Driver implementations.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "driverURI",
                                    "description": "URI of the driver.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "readIfExists",
                            "description": "True if ItemMirror\n                  should create an ItemMirror if it does not exist,\n                  else false. Required for Case 2 & 3.",
                            "type": "Boolean"
                        },
                        {
                            "name": "parent",
                            "description": "Parent ItemMirror of the ItemMirror\n                     to be constructed. Optional.",
                            "type": "ItemMirror"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "itemMirror",
                            "description": "Newly constructed ItemMirror",
                            "type": "ItemMirror"
                        }
                    ]
                }
            ]
        },
        "XooMLAssociation": {
            "name": "XooMLAssociation",
            "shortname": "XooMLAssociation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\XooMLAssociation.js",
            "line": 1,
            "description": "XooMLAssociation is a minimal interface to represent a XooML2 association\nwithin a fragment.\n\nThrows NullArgumentException when GUID, name, or isUpgradeable is null. <br/>\nThrows InvalidTypeException if GUID, or name is not a String and if\nisUpgradeable is not a boolean. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "isUpgradeable",
                    "description": "Boolean representing if the association\n                 is upgradeable.",
                    "type": "Boolean"
                },
                {
                    "name": "displayText",
                    "description": "Display text of the association.",
                    "type": "String"
                },
                {
                    "name": "associatedItem",
                    "description": "Associated item of the association.",
                    "type": "String"
                }
            ]
        },
        "XooMLConfig": {
            "name": "XooMLConfig",
            "shortname": "XooMLConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\XooMLConfig.js",
            "line": 1,
            "description": "Configuration variables for XooML.js",
            "static": 1
        },
        "XooMLDriver": {
            "name": "XooMLDriver",
            "shortname": "XooMLDriver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\XooMLDriver.js",
            "line": 1,
            "description": "An XooML utility interacts with an storage and is responsible for\nreading and writing XooML fragments. This is an implementation of XooML utility\nusing Dropbox as the storage.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new XooMLU with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "utilityURI",
                            "description": "URI of the utility",
                            "type": "String"
                        },
                        {
                            "name": "dropboxClient",
                            "description": "Authenticated dropbox client",
                            "type": "Object"
                        }
                    ]
                }
            ]
        },
        "XooMLExceptions": {
            "name": "XooMLExceptions",
            "shortname": "XooMLExceptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\XooMLExceptions.js",
            "line": 1,
            "description": "Collection of exceptions associated with the XooML tools.",
            "static": 1
        },
        "XooMLUtil": {
            "name": "XooMLUtil",
            "shortname": "XooMLUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "scripts\\XooMLUtil.js",
            "line": 1,
            "description": "Collection of type checking, exception throwing, utility methods for the\nXooML tools.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 109,
            "description": "Updates the ETag.",
            "itemtype": "method",
            "name": "updateETag",
            "access": "private",
            "tagname": "updateETag",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "GUID",
                            "description": "GUID from the new ETag.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 130,
            "description": "Returns the XooML schema version.",
            "itemtype": "method",
            "name": "getSchemaVersion",
            "return": {
                "description": "XooML schema version.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 144,
            "description": "Sets the XooML schema version.\n\nThrows NullArgumentException if schemaVersion is null. <br/>\nThrows InvalidTypeException if schemaVersion is not a String. <br/>",
            "itemtype": "method",
            "name": "setSchemaVersion",
            "params": [
                {
                    "name": "schemaVersion",
                    "description": "Schema version to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 161,
            "description": "Returns the XooML schema location.",
            "itemtype": "method",
            "name": "getSchemaLocation",
            "return": {
                "description": "XooML schema location.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 175,
            "description": "Sets the XooML schema location.\n\nThrows NullArgumentException if schemaLocation is null. <br/>\nThrows InvalidTypeException if schemaLocation is not a String. <br/>",
            "itemtype": "method",
            "name": "setSchemaLocation",
            "params": [
                {
                    "name": "schemaLocation",
                    "description": "Schema location to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 192,
            "description": "Returns URI pointing to item described by the metadata of a fragment. A URI\nmight point to just about anything that can be interpreted as a grouping\nitem. For example: a conventional file system folder or a “tag's\nsupported by any of several applications.",
            "itemtype": "method",
            "name": "getItemDescribed",
            "return": {
                "description": "A URI pointing to item described by the metadata of a\n                 fragment if it exists, else returns null.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 210,
            "description": "Sets the item described by self fragment.\n\nThrows NullArgumentException if itemDescribed is null. <br/>\nThrows InvalidTypeException if itemDescribed is not a String. <br/>",
            "itemtype": "method",
            "name": "setItemDescribed",
            "async": 1,
            "params": [
                {
                    "name": "itemDescribed",
                    "description": "Item described to be set.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback function",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error to the callback",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 230,
            "description": "Returns the item utility. An item utility supports HTML5 filesystem API. self\nutility must work hand in glove with SyncU. There is no exclusive control\nover items as stored in the dataStore so need to view and synchronize.\nInvoked directly to Open and Close. Delete, create. Invoked indirectly via\nUI.",
            "itemtype": "method",
            "name": "getItemDriver",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "itemUtility",
                            "description": "A URI of the item utility.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 252,
            "description": "Sets the item utility. An item utility supports HTML5 filesystem API. self\nutility must work hand in glove with SyncU. There is no exclusive control\nover items as stored in the dataStore so need to view and synchronize.\nInvoked directly to Open and Close. Delete, create. Invoked indirectly via\nUI.\n\nThrows NullArgumentException if itemUtility is null. <br/>\nThrows InvalidTypeException if itemUtility is not a String. <br/>",
            "itemtype": "method",
            "name": "setItemUtility",
            "params": [
                {
                    "name": "itemUtility",
                    "description": "Item utility to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 273,
            "description": "Returns the sync utility.",
            "itemtype": "method",
            "name": "getSyncUtility",
            "return": {
                "description": "Sync utility.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 287,
            "description": "Sets the sync utility.\n\nThrows NullArgumentException if syncUtility is null. <br/>\nThrows InvalidTypeException if syncUtility is not a String. <br/>",
            "itemtype": "method",
            "name": "setSyncUtility",
            "params": [
                {
                    "name": "syncUtility",
                    "description": "Item utility to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 304,
            "description": "Returns the XooML utility.",
            "itemtype": "method",
            "name": "getXooMLUtility",
            "return": {
                "description": "XooML utility.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 318,
            "description": "Sets the XooML utility.\n\nThrows NullArgumentException if xooMlUtility is null. <br/>\nThrows InvalidTypeException if xooMlUtility is not a String. <br/>",
            "itemtype": "method",
            "name": "setXooMLUtility",
            "params": [
                {
                    "name": "xooMlUtility",
                    "description": "Item utility to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 335,
            "description": "Returns the GUID generated on the last modification to the file.",
            "itemtype": "method",
            "name": "getGUIDGeneratedOnLastWrite",
            "return": {
                "description": "GUID Guid",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 348,
            "description": "Returns an array of the attributes within the fragment common.",
            "itemtype": "method",
            "name": "listFragmentCommonAttributes",
            "return": {
                "description": "Array of attributes within the the fragment common.",
                "type": "String[]"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 361,
            "description": "Returns the display text for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationDisplayText",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Display name of the association with the given GUID.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 380,
            "description": "Sets the display name for the association with the given GUID.\n\nThrows NullArgumentException if GUID or displayName is null. <br/>\nThrows InvalidTypeException if GUID or displayName is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationDisplayName",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to set.",
                    "type": "String"
                },
                {
                    "name": "displayName",
                    "description": "Display name to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 399,
            "description": "Returns the XooML fragment for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationAssociatedXooMLFragment",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "XooML fragment of the association with the given GUID.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 419,
            "description": "Sets the XooML fragment for the association with the given GUID.\n\nThrows NullArgumentException if GUID or xooMLFragment is null. <br/>\nThrows InvalidTypeException if GUID or xooMLFragment is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationAssociatedXooMLFragment",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to set.",
                    "type": "String"
                },
                {
                    "name": "associatedXooMLFragment",
                    "description": "Fragment XooML fragment to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 439,
            "description": "Returns the XooML utility for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationXooMLUtility",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "XooML utility of the association with the given GUID.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 459,
            "description": "Sets the XooML utility for the association with the given GUID.\n\nThrows NullArgumentException if GUID or xooMLUtility is null. <br/>\nThrows InvalidTypeException if GUID or xooMLUtility is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationXooMLUtility",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to set.",
                    "type": "String"
                },
                {
                    "name": "xooMLUtility",
                    "description": "XooML utility to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 478,
            "description": "Returns the local item for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationLocalItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Local item of the association with the given GUID.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 498,
            "description": "Sets the local item for the association with the given GUID.\n\nThrows NullArgumentException if GUID or localItem is null. <br/>\nThrows InvalidTypeException if GUID or localItem is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationLocalItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to set.",
                    "type": "String"
                },
                {
                    "name": "localItem",
                    "description": "Local item to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 517,
            "description": "Returns the associated item for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationAssociatedItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "associatedItem",
                            "description": "Associated item of the\n                   association with the given GUID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 542,
            "description": "Sets the associated item for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationAssociatedItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                },
                {
                    "name": "associatedItem",
                    "description": "Associated item to set.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 565,
            "description": "Returns an array of the association common attributes within the\nassociation with the given GUID.\n\nThrows NullArgumentException if GUID or localItem is null. <br/>\nThrows InvalidTypeException if GUID or localItem is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "listAssociationCommonAttributes",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to list common attributes for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Association common attributes within the association",
                "type": "String[]"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 585,
            "description": "Returns the value of the given attributeName for the fragmentNamespaceData\nwith the given namespaceURI.\n\nThrows NullArgumentException if attributeName or namespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName or namespaceURI is not a\nString. <br/>",
            "itemtype": "method",
            "name": "getFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be returned.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the given\n                              attributeName.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value of the given attributeName within the given\n                 namespaceURI if the given attributeName exists, else\n                 returns null.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 609,
            "description": "Adds the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName has already\nbeen added. <br/>",
            "itemtype": "method",
            "name": "addFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 639,
            "description": "Removes the fragment namespace attribute with the given namespaceURI.\n\nThrows NullArgumentException if attributeName, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, or namespaceURI is not\na String. <br/>\nThrows an InvalidStateException when the given attributeName is not an\nattribute. <br/>",
            "itemtype": "method",
            "name": "removeFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 666,
            "description": "Checks if the fragment has the given namespaceURI.\n\nThrows NullArgumentException if attributeName, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, or namespaceURI is not\na String. <br/>",
            "itemtype": "method",
            "name": "Namespace",
            "params": [
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "result",
                            "description": "True if the fragment has the\n                   given namespaceURI, else false.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 691,
            "description": "Sets the value of the given attributeName with the given attributeValue\nfor the fragmentNamespaceData with the given namespaceURI.\n\nThrows NullArgumentException if attributeName, attributeValue, or\nnamespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName, attributeValue, or\nnamespaceURI is not a String. <br/>",
            "itemtype": "method",
            "name": "setFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the given\n                               attributeName.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 713,
            "description": "Returns an array of the attributes within the fragmentNamespaceData with the\ngiven namespaceURI.\n\nThrows NullArgumentException if namespaceURI is null. <br/>\nThrows InvalidTypeException if namespaceURI is not a String. <br/>",
            "itemtype": "method",
            "name": "listFragmentNamespaceAttributes",
            "params": [
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the given\n                               attributeName.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of attributes within the fragmentNamespaceData with\n                the given namespaceURI.",
                "type": "String[]"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 733,
            "description": "Returns the fragment namespace data with the given namespaceURI.\n\nThrows NullArgumentException if namespaceURI is null. <br/>\nThrows InvalidTypeException if namespaceURI is not a String. <br/>",
            "itemtype": "method",
            "name": "getFragmentNamespaceData",
            "params": [
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace to be set.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Fragment namespace data with the given namespaceURI.\n                 If a string is returned it will be valid\n                 fragmentNamespaceData.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 753,
            "description": "Returns the fragment namespace data with the given namespaceURI.\n\nThrows NullArgumentException if namespaceURI or data is null. <br/>\nThrows InvalidTypeException if namespaceURI or data is not a String. <br/>",
            "itemtype": "method",
            "name": "setFragmentNamespaceData",
            "params": [
                {
                    "name": "data",
                    "description": "Fragment namespace data to be set. Must be valid\n                namespaceData.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace to be set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 771,
            "description": "Creates an association based on the given options and the following\ncases.\n\nCase 1: Simple text association declared phantom. <br/>\nCase 2: Link to existing non-grouping item, phantom. <br/>\nCase 3: Link to existing non-grouping item, real. <br/>\nCase 4: Link to existing grouping item, phantom. <br/>\nCase 5: Link to existing grouping item, real. <br/>\nCase 6: Create new local non-grouping item. <br/>\nCase 7: Create new local grouping item. <br/>\n\nThrows NullArgumentException when options, callback is null. <br/>\nThrows InvalidTypeException when options is not an object and callback\nis not a function. <br/>\nThrows MissingParameterException when an argument is missing for an expected\ncase. <br/>",
            "itemtype": "method",
            "name": "createAssociation",
            "params": [
                {
                    "name": "options",
                    "description": "Data to create an new association for.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "displayText.",
                            "description": "Display text for the association.\n                  Required in all cases.",
                            "type": "String"
                        },
                        {
                            "name": "itemOrXooMLFragmentURI",
                            "description": "URI of the item or\n                  XooMLFragment depending on the case. Required for\n                  cases 2, 3, 4 & 5.",
                            "type": "String"
                        },
                        {
                            "name": "localItemRequested",
                            "description": "True if the local item is\n                  requested, else false. Required for cases 2, 3, 4, & 5.",
                            "type": "Boolean"
                        },
                        {
                            "name": "xooMLUtilityURI",
                            "description": "URI of the XooML utility for the\n                  association. Required for cases 4 & 5.",
                            "type": "String"
                        },
                        {
                            "name": "itemName",
                            "description": "Name of the new local\n                  non-grouping/grouping item. Required for cases 6 & 7.",
                            "type": "String"
                        },
                        {
                            "name": "itemType",
                            "description": "Type of the new local\n                  non-grouping/grouping item. Required for case 6.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "GUID of the newly created association.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 848,
            "description": "Deletes the association represented by the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "deleteAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to be deleted.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 882,
            "description": "Lists the GUIDs of each association.",
            "itemtype": "method",
            "name": "listAssociations",
            "return": {
                "description": "Array of the GUIDs of each association\n                   of the given namespaceURI",
                "type": "String[]"
            },
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "GUIDs",
                            "description": "Array of each association GUID\n                   within given namespaceURI.",
                            "type": "String[]"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 911,
            "description": "Returns the association namespace attribute with the given attributeName\nand the given namespaceURI within the association with the given GUID.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be returned.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association to return attribute from.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace for the association.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value of association namespace attribute with the given\n                 attributeName and the given namespaceURI within the\n                 association with the given GUID.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 939,
            "description": "Adds the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName has already\nbeen added. <br/>",
            "itemtype": "method",
            "name": "addAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 970,
            "description": "Removes the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName is not an\nattribute. <br/>",
            "itemtype": "method",
            "name": "removeAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1001,
            "description": "Sets the association namespace attribute with the given attributeName\nand the given namespaceURI within the association with the given GUID.\n\nThrows NullArgumentException if attributeName, attributeValue, GUID, or\nnamespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName, attributeValue, GUID, or\nnamespaceURI is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribute to be set",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of association to set attribute for.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace for the association.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1026,
            "description": "Returns if an association with the given GUID has the given namespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "hasAssociationNamespace",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "result",
                            "description": "True if the association has the\n                   given namespaceURI, else false.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1053,
            "description": "Returns an array of the association namespace attributes with the given\nattributeName and the given namespaceURI within the association with\nthe given GUID.\n\nThrows NullArgumentException if GUID, namespaceURI is null. <br/>\nThrows InvalidTypeException if GUID, namespaceURI is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "listAssociationNamespaceAttributes",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of association to list attributes for.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace for the association.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of the attributes within the association namespace\n                   with the given namespaceURI.",
                "type": "String[]"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1076,
            "description": "Returns the association namespace data for an association with the given GUID\nand the given namespaceURI.\n\nThrows NullArgumentException if GUID, namespaceURI is null. <br/>\nThrows InvalidTypeException if GUID, namespaceURI is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationNamespaceData",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association namespace data to\n                              returned.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the association\n                              namespace data to returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Association namespace data if the association namespace data\n                 exists, else returns null. If a string is returned it will be\n                 valid fragmentNamespaceData.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1101,
            "description": "Sets the association namespace data for an association with the given GUID\nand given namespaceURI using the given data.\n\nThrows NullArgumentException if data, GUID, or namespaceURI is null. <br/>\n Throws InvalidTypeException if data, GUID, or namespaceURI is not a\nString. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationNamespaceData",
            "params": [
                {
                    "name": "data",
                    "description": "Association namespace data to set. Must be\n                              valid fragmentNamespaceData.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association namespace data to set.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the association\n                              namespace data to set.",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1124,
            "description": "Returns a string representation of wrapper.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "String representation of self wrapper.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1141,
            "description": "TODO",
            "itemtype": "method",
            "name": "_parseXML",
            "access": "private",
            "tagname": "_parseXML",
            "params": [
                {
                    "name": "xml",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Object"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1166,
            "description": "TODO",
            "itemtype": "method",
            "name": "_createXooMLFragment",
            "access": "private",
            "tagname": "_createXooMLFragment",
            "return": {
                "description": "TODO GUID of the",
                "type": "Object"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1211,
            "description": "Creates an association.",
            "itemtype": "method",
            "name": "self._createAssociation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association",
                    "type": "String"
                },
                {
                    "name": "associationXooMLFragment",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "displayText",
                    "description": "Display text of the association.",
                    "type": "String"
                },
                {
                    "name": "associatedItem",
                    "description": "Associated item of the association.",
                    "type": "String"
                },
                {
                    "name": "localItem",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "fragment",
                    "description": "TODO",
                    "type": "Object"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1286,
            "description": "TODO meta function for self._setAttribute, self._listAttributes, self._getAttribute, self._setNamespaceData, self._getNamespaceData\n\nThrows NullArgumentException if elementName is null. <br/>\nThrows InvalidTypeException if GUID, or namespaceURI exists and is not a\nstring. <br/>",
            "itemtype": "method",
            "name": "_getOrCreateElement",
            "access": "private",
            "tagname": "_getOrCreateElement",
            "params": [
                {
                    "name": "elementName",
                    "description": "Name of the element",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TODO",
                "type": "Object"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1407,
            "description": "Returns the value of the given attributeName for the common fragment.",
            "itemtype": "method",
            "name": "_getAttribute",
            "access": "private",
            "tagname": "_getAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be returned.",
                    "type": "String"
                },
                {
                    "name": "elementName",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Value of the given attributeName if the attributeName\n                 exists, else null.",
                "type": "String"
            },
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\FragmentDriver.js",
            "line": 1433,
            "description": "Sets the given attributeName to the given attributeValue for the fragment\n common.",
            "itemtype": "method",
            "name": "_setAttribute",
            "access": "private",
            "tagname": "_setAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribute to be set. If type\n                               of attributeValue is an Array than multiple\n                               values, each element of the array, will be\n                               set to the given attributeName. Else if\n                               the type of attributeValue is a String than\n                               one value, the given string, will be set to\n                               the given attributeName",
                    "type": "String"
                },
                {
                    "name": "elementName",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "TODO",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "TODO",
                    "type": "String"
                }
            ],
            "class": "FragmentDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 36,
            "description": "Constructs a ItemDriver for reading/writing Item Storage",
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 92,
            "description": "Creates a grouping item at the location",
            "itemtype": "method",
            "name": "createGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the grouping item will be created",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 109,
            "description": "Creates or uploads a non-grouping item at the location",
            "itemtype": "method",
            "name": "createNonGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the non-grouping item will be created",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "the contents to be written to the non-grouping item",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 127,
            "description": "Deletes a grouping item at the location",
            "itemtype": "method",
            "name": "deleteGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the grouping item is located",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 144,
            "description": "Deletes a non-grouping item at the location",
            "itemtype": "method",
            "name": "deleteNonGroupingItem",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the non-grouping item is located",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the name of the non-grouping item",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 162,
            "description": "Copies an item in the fashion of moveItem",
            "itemtype": "method",
            "name": "copyItem",
            "params": [
                {
                    "name": "fromPath",
                    "description": "the path to the file you want copied",
                    "type": "String"
                },
                {
                    "name": "toPath",
                    "description": "the GroupingItem path you want the fromPath file copied to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 180,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveItem",
            "params": [
                {
                    "name": "fromPath",
                    "description": "the path to the file you want moved",
                    "type": "String"
                },
                {
                    "name": "toPath",
                    "description": "the GroupingItem path you want the fromPath file moved",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 198,
            "description": "Get publicly readable download url for a non-grouping item from Dropbox website.",
            "itemtype": "method",
            "name": "getURL",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the non-grouping item is located",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when self function is finished with it's operation.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 215,
            "description": "Lists the items under the grouping item",
            "itemtype": "method",
            "name": "listItems",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the grouping item",
                    "type": "String"
                },
                {
                    "name": "callback(output)",
                    "description": "Function to be called when self function is finished with it's operation. Output is an array of XooMLAssociations.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemDriver.js",
            "line": 244,
            "description": "Check if the item is existed",
            "itemtype": "method",
            "name": "checkExisted",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the location that the item is located",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the name of the item",
                    "type": "String"
                },
                {
                    "name": "callback(result)",
                    "description": "Function to be called when self function is finished with it's operation. Result is the bollean value for whether existed.",
                    "type": "Function"
                }
            ],
            "class": "ItemDriver"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 151,
            "description": "Returns the grouping item URI.",
            "itemtype": "method",
            "name": "getGroupingItemURI",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "groupingItemURI",
                            "description": "Grouping item URI.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 168,
            "description": "Returns the display name.",
            "itemtype": "method",
            "name": "getDisplayName",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "displayName",
                            "description": "Display name.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 227,
            "description": "Returns URI pointing to item described by the metadata of a fragment. A URI\nmight point to just about anything that can be interpreted as a grouping\nitem. For example: a conventional file system folder or a “tag�as\nsupported by any of several applications.",
            "itemtype": "method",
            "name": "getItemDescribed",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "itemDescribed",
                            "description": "A URI pointing to item\n                   described by the metadata of a fragment if it\n                   exists, else returns null.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 288,
            "description": "Returns a publicly available URL hosted at dropbox for an associated non-grouping item",
            "itemtype": "method",
            "name": "getURLForAssociatedNonGroupingItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                 in executing this function, else an contains\n                 an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "publicURL",
                            "description": "Local item of the association\n                 with the given GUID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 354,
            "description": "Returns the GUID generated on the last modification to the file.",
            "itemtype": "method",
            "name": "getGUIDGeneratedOnLastWrite",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "GUIDGeneratedOnLastWrite",
                            "description": "Gets the GUID\n                   generated on last write of this XooML Fragment.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 372,
            "description": "Returns the display text for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationDisplayText",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "displayText",
                            "description": "The display text.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 395,
            "description": "Sets the display text for the association with the given GUID.\n\nThrows NullArgumentException if GUID or displayName is null. <br/>\nThrows InvalidTypeException if GUID or displayName is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationDisplayText",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to set.",
                    "type": "String"
                },
                {
                    "name": "displayText",
                    "description": "Display text to be set.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 419,
            "description": "Returns the XooML fragment for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationAssociatedXooMLFragment",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "associatedXooMLFragment",
                            "description": "The associated\n                   XooMLFragment.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 443,
            "description": "Returns the local item for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationLocalItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "localItem",
                            "description": "Local item of the association\n                   with the given GUID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 467,
            "description": "Returns the associated item for the association with the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationAssociatedItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to get.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "associatedItem",
                            "description": "Associated item of the\n                   association with the given GUID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 491,
            "description": "Returns the value of the given attributeName for the fragmentNamespaceData\nwith the given namespaceURI.\n\nThrows NullArgumentException if attributeName or namespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName or namespaceURI is not a\nString. <br/>",
            "itemtype": "method",
            "name": "getFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be returned.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the given\n                              attributeName.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "fragmentNamespaceAttribute",
                            "description": "Value of the given\n                   attributeName within the given namespaceURI if the given\n                   attributeName exists, else returns null.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 518,
            "description": "Adds the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName has already\nbeen added. <br/>",
            "itemtype": "method",
            "name": "addFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 547,
            "description": "Removes the fragment namespace attribute with the given namespaceURI.\n\nThrows NullArgumentException if attributeName, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, or namespaceURI is not\na String. <br/>\nThrows an InvalidStateException when the given attributeName is not an\nattribute. <br/>",
            "itemtype": "method",
            "name": "removeFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 573,
            "description": "Checks if the fragment has the given namespaceURI.\n\nThrows NullArgumentException if attributeName, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, or namespaceURI is not\na String. <br/>",
            "itemtype": "method",
            "name": "hasFragmentNamespace",
            "params": [
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "result",
                            "description": "True if the fragment has the\n                   given namespaceURI, else false.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 598,
            "description": "Sets the value of the given attributeName with the given attributeValue\nfor the fragmentNamespaceData with the given namespaceURI.\n\nThrows NullArgumentException if attributeName, attributeValue, or\nnamespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName, attributeValue, or\nnamespaceURI is not a String. <br/>",
            "itemtype": "method",
            "name": "setFragmentNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the given\n                               attributeName.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 626,
            "description": "Returns an array of the attributes within the fragmentNamespaceData with the\ngiven namespaceURI.\n\nThrows NullArgumentException if namespaceURI is null. <br/>\nThrows InvalidTypeException if namespaceURI is not a String. <br/>",
            "itemtype": "method",
            "name": "listFragmentNamespaceAttributes",
            "params": [
                {
                    "name": "namespaceURI",
                    "description": "Name of the namespace of the given\n                               attributeName.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "fragmentNamespaceAttributes",
                            "description": "Array of\n                   attributes within the fragmentNamespaceData with\n                   the given namespaceURI.",
                            "type": "String[]"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 651,
            "description": "Returns the fragment namespace data with the given namespaceURI.\n\nThrows NullArgumentException if namespaceURI is null. <br/>\nThrows InvalidTypeException if namespaceURI is not a String. <br/>",
            "itemtype": "method",
            "name": "getFragmentNamespaceData",
            "params": [
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace to be set.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "fragmentNamespaceData",
                            "description": "Fragment namespace\n                   data with the given namespaceURI. If a string is\n                   returned it will be valid fragmentNamespaceData.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 675,
            "description": "Returns the fragment namespace data with the given namespaceURI.\n\nThrows NullArgumentException if namespaceURI or data is null. <br/>\nThrows InvalidTypeException if namespaceURI or data is not a String. <br/>",
            "itemtype": "method",
            "name": "setFragmentNamespaceData",
            "params": [
                {
                    "name": "data",
                    "description": "Fragment namespace data to be set. Must be valid\n                namespaceData.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace to be set.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 700,
            "description": "Creates an ItemMirror from the associated grouping item represented by\nthe given GUID.\n\nThrows NullArgumentException if GUID or callback is null. <br/>\nThrows InvalidTypeException if GUID is not a string, and callback is\nnot a function. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "createItemMirrorForAssociatedGroupingItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to create the ItemMirror\n                from.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "itemMirror",
                            "description": "ItemMirror from the groupingItem\n                     of the given GUID, null if the given GUID is not\n                     a grouping item.",
                            "type": "ItemMirror"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 771,
            "description": "Creates an association based on the given options and the following\ncases.\n\nCases 1, 2, 7 implemented. All else are not implemented.\n\nCase 1: Simple text association declared phantom. <br/>\nCase 2: Link to existing non-grouping item, phantom. <br/>\nCase 3: Link to existing non-grouping item, real. <br/>\nCase 4: Link to existing grouping item, phantom. <br/>\nCase 5: Link to existing grouping item, real. <br/>\nCase 6: Create new local non-grouping item. <br/>\nCase 7: Create new local grouping item. <br/>\n\nThrows NullArgumentException when options, or callback is null. <br/>\nThrows InvalidTypeException when options is not an object and callback\nis not a function. <br/>\nThrows MissingParameterException when an argument is missing for an expected\ncase. <br/>",
            "itemtype": "method",
            "name": "createAssociation",
            "params": [
                {
                    "name": "options",
                    "description": "Data to create an new association for.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "displayText",
                            "description": "Display text for the association.\n                  Required in all cases.",
                            "type": "String"
                        },
                        {
                            "name": "itemURI",
                            "description": "URI of the item. Required for case 2 & 3.",
                            "type": "String"
                        },
                        {
                            "name": "localItemRequested",
                            "description": "True if the local item is\n                  requested, else false. Required for cases 2 & 3.",
                            "type": "Boolean"
                        },
                        {
                            "name": "groupingItemURI",
                            "description": "URI of the grouping item.\n                  Required for cases 4 & 5.",
                            "type": "String"
                        },
                        {
                            "name": "xooMLDriverURI",
                            "description": "URI of the XooML driver for the\n                  association. Required for cases 4 & 5.",
                            "type": "String"
                        },
                        {
                            "name": "itemName",
                            "description": "URI of the new local\n                  non-grouping/grouping item. Required for cases 6 & 7.",
                            "type": "String"
                        },
                        {
                            "name": "isGroupingItem",
                            "description": "True if the item is a grouping\n                  item, else false. Required for cases 6 & 7.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "GUID",
                            "description": "GUID of the association created.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 855,
            "description": "Cuts (returns path to) the association represented by a given GUID\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "cutAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to execute once finished.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error Null if no error has occurred\n                in executing this function, else it contains\n                an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "ItemMirror",
                            "description": "path of the source ItemMirror",
                            "type": "String"
                        },
                        {
                            "name": "GUID",
                            "description": "GUID of the association to execute once finished.",
                            "type": "String"
                        },
                        {
                            "name": "cut",
                            "description": "Whether or not to cut the item and remove the source association",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 887,
            "description": "Copies (returns path to) the association represented by a given GUID\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "copyAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to execute once finished.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error Null if no error has occurred\n                in executing this function, else it contains\n                an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "ItemMirror",
                            "description": "path of the source ItemMirror",
                            "type": "String"
                        },
                        {
                            "name": "GUID",
                            "description": "GUID of the association to execute once finished.",
                            "type": "String"
                        },
                        {
                            "name": "cut",
                            "description": "Whether or not to cut the item and remove the source association",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 919,
            "description": "Paste (inserts) a cut or copy association represented by a given GUID and source ItemMirror\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "pasteAssociation",
            "params": [
                {
                    "name": "ItemMirror",
                    "description": "ItemMirror that contains the association you want moved or copied",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association to move or copy",
                    "type": "String"
                },
                {
                    "name": "Cut",
                    "description": "Cuts the item, deleting the source Association if set to true. Copies if false.",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error Null if no error has occurred\n                in executing this function, else it contains\n                an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 966,
            "description": "Duplicates (copies) an association to another ItemMirror Object (representing a grouping item)\n\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "duplicateAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the source item you wish to copy/duplicate",
                    "type": "String"
                },
                {
                    "name": "ItemMirror",
                    "description": "ItemMirror representing the grouping item you want to move the GUID object to",
                    "type": "ItemMirror"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error Null if no error has occurred\n                in executing this function, else it contains\n                an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1031,
            "description": "Moves an association to another ItemMirror Object (representing a grouping item)\n\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "moveAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the item you want to paste or move",
                    "type": "String"
                },
                {
                    "name": "ItemMirror",
                    "description": "ItemMirror representing the grouping item you want to move the GUID object to",
                    "type": "ItemMirror"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error Null if no error has occurred\n                in executing this function, else it contains\n                an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1102,
            "description": "Deletes the association represented by the given GUID.\n\nThrows NullArgumentException if GUID is null. <br/>\nThrows InvalidTypeException if GUID is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "deleteAssociation",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to be deleted.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1149,
            "description": "Upgrades a given association without a local item. Local item is named\nby a truncated form of the display name of this ItemMirror if the\nlocalItemURI is not given, else uses given localItemURI. Always\ntruncated to 50 characters.\n\nONLY SUPPORTS SIMPLE PHANTOM ASSOCIATION TO ASSOCIATION WITH GROUPING ITEM\n\nThrows NullArgumentException when options is null. <br/>\nThrows MissingParameterException when options is not null and a required\nargument is missing.<br/>\nThrows InvalidTypeException if GUID is not a string, and if callback\nis not a function. <br/>\nThrows InvalidState if the association with the given GUID cannot be\nupgraded. <br/>",
            "itemtype": "method",
            "name": "upgradeAssociation",
            "params": [
                {
                    "name": "options",
                    "description": "Data to construct a new ItemMirror with",
                    "type": "Object",
                    "props": [
                        {
                            "name": "GUID",
                            "description": "of the association to be upgraded. Required",
                            "type": "String"
                        },
                        {
                            "name": "localItemURI",
                            "description": "URI of the local item to be used if\n                 a truncated display name is not the intended behavior.\n                 Optional.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1205,
            "description": "Renames the local item for the association with the given GUID.\n\nThrows NullArgumentException if GUID, callback is null. <br/>\nThrows InvalidTypeException if GUID is not a String, and if callback\nis not a function. <br/>",
            "itemtype": "method",
            "name": "renameLocalItem",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "String",
                    "description": "String Name you want to rename the file to (including file extension)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1243,
            "description": "Checks if the association with the given GUID is a grouping item.\n\nThrows NullArgumentException if GUID, callback is null. <br/>\nThrows InvalidTypeException if GUID is not a String, and if callback\nis not an function. <br/>",
            "itemtype": "method",
            "name": "isAssociatedItemGrouping",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association to be to be checked.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                 in executing this function, else an contains\n                 an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "isGroupingItem",
                            "description": "True if the association\n                  with the given GUID is a grouping item, else\n                  false.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1289,
            "description": "Lists the GUIDs of each association.",
            "itemtype": "method",
            "name": "listAssociations",
            "return": {
                "description": "Array of the GUIDs of each association\n                   of the given namespaceURI",
                "type": "String[]"
            },
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "GUIDs",
                            "description": "Array of each association GUID\n                   within given namespaceURI.",
                            "type": "String[]"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1310,
            "description": "Returns the association namespace attribute with the given attributeName\nand the given namespaceURI within the association with the given GUID.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be returned.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association to return attribute from.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "associationNamespaceAttribute",
                            "description": "Value of\n                   association namespace attribute with the given\n                   attributeName and the given namespaceURI within the\n                   association with the given GUID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1341,
            "description": "Adds the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName has already\nbeen added. <br/>",
            "itemtype": "method",
            "name": "addAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1370,
            "description": "Removes the given attributeName to the association with the given GUID and\nnamespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>\nThrows an InvalidStateException when the given attributeName is not an\nattribute. <br/>",
            "itemtype": "method",
            "name": "removeAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1399,
            "description": "Returns if an association with the given GUID has the given namespaceURI.\n\nThrows NullArgumentException if attributeName, GUID, or namespaceURI is\nnull. <br/>\nThrows InvalidTypeException if attributeName, GUID, or namespaceURI is not\na String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "hasAssociationNamespace",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "result",
                            "description": "True if the association has the\n                   given namespaceURI, else false.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1426,
            "description": "Sets the association namespace attribute with the given attributeName\nand the given namespaceURI within the association with the given GUID.\n\nThrows NullArgumentException if attributeName, attributeValue, GUID, or\nnamespaceURI is null. <br/>\nThrows InvalidTypeException if attributeName, attributeValue, GUID, or\nnamespaceURI is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationNamespaceAttribute",
            "params": [
                {
                    "name": "attributeName",
                    "description": "Name of the attribute to be set.",
                    "type": "String"
                },
                {
                    "name": "attributeValue",
                    "description": "Value of the attribute to be set",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of association to set attribute for.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1456,
            "description": "Returns an array of the association namespace attributes with the given\nattributeName and the given namespaceURI within the association with\nthe given GUID.\n\nThrows NullArgumentException if GUID, namespaceURI is null. <br/>\nThrows InvalidTypeException if GUID, namespaceURI is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "listAssociationNamespaceAttributes",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of association to list attributes for.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace for the association.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "Array",
                    "description": "of the attributes within the association namespace\n                   with the given namespaceURI.",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1485,
            "description": "Returns the association namespace data for an association with the given GUID\nand the given namespaceURI.\n\nThrows NullArgumentException if GUID, namespaceURI is null. <br/>\nThrows InvalidTypeException if GUID, namespaceURI is not a String. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "getAssociationNamespaceData",
            "params": [
                {
                    "name": "GUID",
                    "description": "GUID of the association namespace data to\n                              returned.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace of the association\n                              namespace data to returned.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "associationNamespaceData",
                            "description": "Association\n                   namespace data if the association namespace data\n                   exists, else returns null. If a string is returned\n                   it will be valid fragmentNamespaceData.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1515,
            "description": "Sets the association namespace data for an association with the given GUID\nand given namespaceURI using the given data.\n\nThrows NullArgumentException if data, GUID, or namespaceURI is null. <br/>\nThrows InvalidTypeException if data, GUID, or namespaceURI is not a\nString. <br/>\nThrows InvalidGUIDException if GUID is not a valid GUID. <br/>",
            "itemtype": "method",
            "name": "setAssociationNamespaceData",
            "params": [
                {
                    "name": "data",
                    "description": "Association namespace data to set. Must be\n                              valid fragmentNamespaceData.",
                    "type": "String"
                },
                {
                    "name": "GUID",
                    "description": "GUID of the association namespace data to set.",
                    "type": "String"
                },
                {
                    "name": "namespaceURI",
                    "description": "URI of the namespace of the association\n                              namespace data to set.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1545,
            "description": "Uses the specified ItemDriver and SyncDriver to synchronize the\nlocal ItemMirror object changes. This is an implmentation of Synchronization\nDriver which modifies the XooML Fragment according to the real structure\nunder the item described.",
            "itemtype": "method",
            "name": "sync",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1564,
            "description": "Checks the local GUID and the remote GUID to see if the local fragment\nis out of date with the remote fragment.",
            "itemtype": "method",
            "name": "isCurrent",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "isCurrent",
                            "description": "True if the local GUID matches\n                   the remote GUID, else false.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1603,
            "description": "Reloads the XooML Fragment",
            "itemtype": "method",
            "name": "refresh",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1630,
            "description": "Returns a string representation of self.",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "toString",
                            "description": "String representation of self\n                   wrapper.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1648,
            "description": "Returns the parent ItemMirror if this ItemMirror has a parent.",
            "itemtype": "method",
            "name": "getParent",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to execute once finished.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Null if no error has occurred\n                   in executing this function, else an contains\n                   an object with the error that occurred.",
                            "type": "Object"
                        },
                        {
                            "name": "parent",
                            "description": "Parent ItemMirror of this\n                   ItemMirror object if it has a parent, else\n                   null.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1769,
            "description": "Async Methods for loading the XooML Fragment String",
            "itemtype": "method",
            "name": "loadXooMLFragmentString",
            "access": "private",
            "tagname": "",
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\ItemMirror.js",
            "line": 1804,
            "description": "Async Methods for getting list of items",
            "itemtype": "method",
            "name": "getItemList",
            "access": "private",
            "tagname": "",
            "class": "ItemMirror"
        },
        {
            "file": "scripts\\XooMLAssociation.js",
            "line": 42,
            "description": "Returns a boolean representing if this XooMLAssociation is a grouping item.",
            "itemtype": "method",
            "name": "getIsGroupingItem",
            "return": {
                "description": "True if this XooMLAssociation is a grouping item\n                  else returns false.",
                "type": "Boolean"
            },
            "class": "XooMLAssociation"
        },
        {
            "file": "scripts\\XooMLAssociation.js",
            "line": 54,
            "description": "Returns the display text of this association.",
            "itemtype": "method",
            "name": "getDisplayText",
            "return": {
                "description": "The display text of this association.",
                "type": "String"
            },
            "class": "XooMLAssociation"
        },
        {
            "file": "scripts\\XooMLDriver.js",
            "line": 30,
            "description": "Constructs a XooMLDriver for reading/writing XooML fragment.",
            "class": "XooMLDriver"
        },
        {
            "file": "scripts\\XooMLDriver.js",
            "line": 58,
            "description": "Reads and returns a XooML fragment",
            "itemtype": "method",
            "name": "getXooMLFragment",
            "params": [
                {
                    "name": "uri",
                    "description": "the location of the XooML fragment",
                    "type": "String"
                },
                {
                    "name": "callback(content)",
                    "description": "Function to be called when self function is finished with it's operation. content is the content of the XooML fragment.",
                    "type": "Function"
                }
            ],
            "class": "XooMLDriver"
        },
        {
            "file": "scripts\\XooMLDriver.js",
            "line": 75,
            "description": "Writes a XooML fragment",
            "itemtype": "method",
            "name": "setXooMLFragment",
            "params": [
                {
                    "name": "uri",
                    "description": "the location of the XooML fragment",
                    "type": "String"
                },
                {
                    "name": "fragment",
                    "description": "the content of the XooML fragment",
                    "type": "String"
                },
                {
                    "name": "callback(content)",
                    "description": "Function to be called when self function is finished with it's operation. content is the content of the XooML fragment.",
                    "type": "Function"
                }
            ],
            "class": "XooMLDriver"
        },
        {
            "file": "scripts\\XooMLDriver.js",
            "line": 94,
            "description": "Check if the XooML fragment is existed",
            "itemtype": "method",
            "name": "checkExisted",
            "params": [
                {
                    "name": "uri",
                    "description": "the location of the XooML fragment",
                    "type": "String"
                },
                {
                    "name": "callback(result)",
                    "description": "Function to be called when self function is finished with it's operation. Result is the bollean value for whether existed.",
                    "type": "Function"
                }
            ],
            "class": "XooMLDriver"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 11,
            "description": "Thrown when a method is not yet implemented.",
            "itemtype": "event",
            "name": "NotImplementedException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 18,
            "description": "Thrown when a required property from a method's options is missing.",
            "itemtype": "event",
            "name": "MissingParameterException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 25,
            "description": "Thrown when an argument is given a null value when it does not accept null\nvalues.",
            "itemtype": "event",
            "name": "NullArgumentException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 33,
            "description": "Thrown when an argument is given a value with a different type from the\nexpected type.",
            "itemtype": "event",
            "name": "InvalidTypeException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 41,
            "description": "Thrown when an a method is called when the object is in invalid state\ngiven what the method expected.",
            "itemtype": "event",
            "name": "InvalidStateArgument",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 49,
            "description": "Thrown after receiving an exception from XooMLU Storage",
            "itemtype": "event",
            "name": "XooMLUException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 56,
            "description": "Thrown after receiving an exception from ItemU Storage",
            "itemtype": "event",
            "name": "ItemUException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 63,
            "description": "Thrown after an association was upgraded that could not be upgraded.",
            "itemtype": "event",
            "name": "NonUpgradeableAssociationException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 70,
            "description": "Thrown after an argument was passed in an invalid state than expected.",
            "itemtype": "event",
            "name": "InvalidArgumentException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 77,
            "description": "Thrown after expecting a file or folder not to exist when it does.",
            "itemtype": "event",
            "name": "FileOrFolderAlreadyExistsException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLExceptions.js",
            "line": 84,
            "description": "Thrown when expecting the ItemMirror to be current, and it is not.",
            "itemtype": "event",
            "name": "FileOrFolderAlreadyExistsException",
            "class": "XooMLExceptions"
        },
        {
            "file": "scripts\\XooMLUtil.js",
            "line": 29,
            "description": "Checks if each option within the given checkedOptions is a property of\nthe given options.",
            "itemtype": "method",
            "name": "hasOptions",
            "params": [
                {
                    "name": "checkedOptions",
                    "description": "Array of strings for each expected option.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options given to a function.",
                    "type": "Object"
                }
            ],
            "class": "XooMLUtil"
        },
        {
            "file": "scripts\\XooMLUtil.js",
            "line": 91,
            "description": "Returns if the given value is an array.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "class": "XooMLUtil"
        },
        {
            "file": "scripts\\XooMLUtil.js",
            "line": 104,
            "description": "Returns if the given value is an object.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the given value is an Object, else false.",
                "type": "Boolean"
            },
            "class": "XooMLUtil"
        },
        {
            "file": "scripts\\XooMLUtil.js",
            "line": 119,
            "description": "Returns if the given value is an function.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the given value is a Function, else false.",
                "type": "Boolean"
            },
            "class": "XooMLUtil"
        },
        {
            "file": "scripts\\XooMLUtil.js",
            "line": 135,
            "description": "Returns if the given value is an string.\n\nThrows NullArgumentException when value is null. <br/>",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "Given object have it's type checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if the given value is a String, else false.",
                "type": "Boolean"
            },
            "class": "XooMLUtil"
        },
        {
            "file": "scripts\\XooMLUtil.js",
            "line": 154,
            "description": "Generates a GUID.",
            "itemtype": "method",
            "name": "generateGUID",
            "return": {
                "description": "Randomly generated GUID.",
                "type": "String"
            },
            "class": "XooMLUtil"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nConstructs a ItemDriver for reading/writing Item Storage",
            "line": " scripts\\ItemDriver.js:36"
        },
        {
            "message": "Missing item type\nConstructs a XooMLDriver for reading/writing XooML fragment.",
            "line": " scripts\\XooMLDriver.js:30"
        }
    ]
}